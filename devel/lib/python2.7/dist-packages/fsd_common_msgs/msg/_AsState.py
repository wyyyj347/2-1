# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fsd_common_msgs/AsState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AsState(genpy.Message):
  _md5sum = "91d4690a3eeefbcc594048a040c965e0"
  _type = "fsd_common_msgs/AsState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Header
std_msgs/Header header
string mission  	#指示当前任务
uint8 whichLap		#进行记圈，指示当前的圈数
uint8 end		#指示达到指定停车位置。0表示未到达，1表示到达。随后速度设为0，同时刹车
#uint8 stop		#指示是否停车。1表示停车，随后通过气瓶进行制动
uint8 finished		#指示任务完成。0表示未完成，1为任务完成
uint8 cameraState	#指示相机状态。0为正常，1为断线或异常
uint8 lidarState	#指示激光雷达状态。0为正常，1为断线或异常
uint8 insState		#指示组合惯导状态。0为正常，1为断线或异常
uint8 sensorState	#指示相机、激光雷达、组合惯导状态，同时正常即为0，有一个传感器断线即为1
uint8 ready		#指示目前无人系统是否准备好，即能否正常接受并处理所有传感器的数据，并正确输出控制指令。0代表正常
float32 count_time #接收到go信号后开始计时


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','mission','whichLap','end','finished','cameraState','lidarState','insState','sensorState','ready','count_time']
  _slot_types = ['std_msgs/Header','string','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mission,whichLap,end,finished,cameraState,lidarState,insState,sensorState,ready,count_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AsState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mission is None:
        self.mission = ''
      if self.whichLap is None:
        self.whichLap = 0
      if self.end is None:
        self.end = 0
      if self.finished is None:
        self.finished = 0
      if self.cameraState is None:
        self.cameraState = 0
      if self.lidarState is None:
        self.lidarState = 0
      if self.insState is None:
        self.insState = 0
      if self.sensorState is None:
        self.sensorState = 0
      if self.ready is None:
        self.ready = 0
      if self.count_time is None:
        self.count_time = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.mission = ''
      self.whichLap = 0
      self.end = 0
      self.finished = 0
      self.cameraState = 0
      self.lidarState = 0
      self.insState = 0
      self.sensorState = 0
      self.ready = 0
      self.count_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mission
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8Bf().pack(_x.whichLap, _x.end, _x.finished, _x.cameraState, _x.lidarState, _x.insState, _x.sensorState, _x.ready, _x.count_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mission = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.whichLap, _x.end, _x.finished, _x.cameraState, _x.lidarState, _x.insState, _x.sensorState, _x.ready, _x.count_time,) = _get_struct_8Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mission
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8Bf().pack(_x.whichLap, _x.end, _x.finished, _x.cameraState, _x.lidarState, _x.insState, _x.sensorState, _x.ready, _x.count_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mission = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.whichLap, _x.end, _x.finished, _x.cameraState, _x.lidarState, _x.insState, _x.sensorState, _x.ready, _x.count_time,) = _get_struct_8Bf().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8Bf = None
def _get_struct_8Bf():
    global _struct_8Bf
    if _struct_8Bf is None:
        _struct_8Bf = struct.Struct("<8Bf")
    return _struct_8Bf
