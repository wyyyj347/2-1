# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fsd_common_msgs/YoloConeTrack.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class YoloConeTrack(genpy.Message):
  _md5sum = "1d0c6c369c7fbde2a67f35f8e09d52e2"
  _type = "fsd_common_msgs/YoloConeTrack"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 x                  # center x
std_msgs/Float32 y                  # center y
std_msgs/Float32 width              # width
std_msgs/Float32 height             # height

std_msgs/String color                 # color of cone, 'r' = red, 'b' = blue, 'y' = yellow
std_msgs/Float32 colorConfidence   	      # confidence of cone detect

geometry_msgs/Point position # 3d position with (x,y,z)
std_msgs/Float32 poseConfidence

std_msgs/UInt8 tracking_id
std_msgs/String tracking_state # OFF, OK, SEARCHING, TERMINATE
std_msgs/UInt8 missing_frams
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/UInt8
uint8 data
"""
  __slots__ = ['x','y','width','height','color','colorConfidence','position','poseConfidence','tracking_id','tracking_state','missing_frams']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/String','std_msgs/Float32','geometry_msgs/Point','std_msgs/Float32','std_msgs/UInt8','std_msgs/String','std_msgs/UInt8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,width,height,color,colorConfidence,position,poseConfidence,tracking_id,tracking_state,missing_frams

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(YoloConeTrack, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = std_msgs.msg.Float32()
      if self.y is None:
        self.y = std_msgs.msg.Float32()
      if self.width is None:
        self.width = std_msgs.msg.Float32()
      if self.height is None:
        self.height = std_msgs.msg.Float32()
      if self.color is None:
        self.color = std_msgs.msg.String()
      if self.colorConfidence is None:
        self.colorConfidence = std_msgs.msg.Float32()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.poseConfidence is None:
        self.poseConfidence = std_msgs.msg.Float32()
      if self.tracking_id is None:
        self.tracking_id = std_msgs.msg.UInt8()
      if self.tracking_state is None:
        self.tracking_state = std_msgs.msg.String()
      if self.missing_frams is None:
        self.missing_frams = std_msgs.msg.UInt8()
    else:
      self.x = std_msgs.msg.Float32()
      self.y = std_msgs.msg.Float32()
      self.width = std_msgs.msg.Float32()
      self.height = std_msgs.msg.Float32()
      self.color = std_msgs.msg.String()
      self.colorConfidence = std_msgs.msg.Float32()
      self.position = geometry_msgs.msg.Point()
      self.poseConfidence = std_msgs.msg.Float32()
      self.tracking_id = std_msgs.msg.UInt8()
      self.tracking_state = std_msgs.msg.String()
      self.missing_frams = std_msgs.msg.UInt8()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f().pack(_x.x.data, _x.y.data, _x.width.data, _x.height.data))
      _x = self.color.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3dfB().pack(_x.colorConfidence.data, _x.position.x, _x.position.y, _x.position.z, _x.poseConfidence.data, _x.tracking_id.data))
      _x = self.tracking_state.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.missing_frams.data
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.x is None:
        self.x = std_msgs.msg.Float32()
      if self.y is None:
        self.y = std_msgs.msg.Float32()
      if self.width is None:
        self.width = std_msgs.msg.Float32()
      if self.height is None:
        self.height = std_msgs.msg.Float32()
      if self.color is None:
        self.color = std_msgs.msg.String()
      if self.colorConfidence is None:
        self.colorConfidence = std_msgs.msg.Float32()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.poseConfidence is None:
        self.poseConfidence = std_msgs.msg.Float32()
      if self.tracking_id is None:
        self.tracking_id = std_msgs.msg.UInt8()
      if self.tracking_state is None:
        self.tracking_state = std_msgs.msg.String()
      if self.missing_frams is None:
        self.missing_frams = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.x.data, _x.y.data, _x.width.data, _x.height.data,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.color.data = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.colorConfidence.data, _x.position.x, _x.position.y, _x.position.z, _x.poseConfidence.data, _x.tracking_id.data,) = _get_struct_f3dfB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking_state.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tracking_state.data = str[start:end]
      start = end
      end += 1
      (self.missing_frams.data,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f().pack(_x.x.data, _x.y.data, _x.width.data, _x.height.data))
      _x = self.color.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f3dfB().pack(_x.colorConfidence.data, _x.position.x, _x.position.y, _x.position.z, _x.poseConfidence.data, _x.tracking_id.data))
      _x = self.tracking_state.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.missing_frams.data
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.x is None:
        self.x = std_msgs.msg.Float32()
      if self.y is None:
        self.y = std_msgs.msg.Float32()
      if self.width is None:
        self.width = std_msgs.msg.Float32()
      if self.height is None:
        self.height = std_msgs.msg.Float32()
      if self.color is None:
        self.color = std_msgs.msg.String()
      if self.colorConfidence is None:
        self.colorConfidence = std_msgs.msg.Float32()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.poseConfidence is None:
        self.poseConfidence = std_msgs.msg.Float32()
      if self.tracking_id is None:
        self.tracking_id = std_msgs.msg.UInt8()
      if self.tracking_state is None:
        self.tracking_state = std_msgs.msg.String()
      if self.missing_frams is None:
        self.missing_frams = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.x.data, _x.y.data, _x.width.data, _x.height.data,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.color.data = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.colorConfidence.data, _x.position.x, _x.position.y, _x.position.z, _x.poseConfidence.data, _x.tracking_id.data,) = _get_struct_f3dfB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracking_state.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tracking_state.data = str[start:end]
      start = end
      end += 1
      (self.missing_frams.data,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f3dfB = None
def _get_struct_f3dfB():
    global _struct_f3dfB
    if _struct_f3dfB is None:
        _struct_f3dfB = struct.Struct("<f3dfB")
    return _struct_f3dfB
