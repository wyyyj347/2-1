# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fsd_common_msgs/Cone.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Cone(genpy.Message):
  _md5sum = "3dc820da84a97838075c98a3929b520d"
  _type = "fsd_common_msgs/Cone"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point position  	      # coordinate of cone in [x, y]
std_msgs/String color                 # color of cone, 'b' = blue, 'y' = yellow, 'o' = orange
std_msgs/Float32 poseConfidence   	      # confidence of cone detect
std_msgs/Float32 colorConfidence   	      # confidence of cone detect

#uint8 cluster
#uint8 pointType
#uint8 pts
#uint8 visited
#uint8[] corepts

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['position','color','poseConfidence','colorConfidence']
  _slot_types = ['geometry_msgs/Point','std_msgs/String','std_msgs/Float32','std_msgs/Float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,color,poseConfidence,colorConfidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Cone, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.color is None:
        self.color = std_msgs.msg.String()
      if self.poseConfidence is None:
        self.poseConfidence = std_msgs.msg.Float32()
      if self.colorConfidence is None:
        self.colorConfidence = std_msgs.msg.Float32()
    else:
      self.position = geometry_msgs.msg.Point()
      self.color = std_msgs.msg.String()
      self.poseConfidence = std_msgs.msg.Float32()
      self.colorConfidence = std_msgs.msg.Float32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.position.x, _x.position.y, _x.position.z))
      _x = self.color.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.poseConfidence.data, _x.colorConfidence.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.color is None:
        self.color = std_msgs.msg.String()
      if self.poseConfidence is None:
        self.poseConfidence = std_msgs.msg.Float32()
      if self.colorConfidence is None:
        self.colorConfidence = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.position.x, _x.position.y, _x.position.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.color.data = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.poseConfidence.data, _x.colorConfidence.data,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.position.x, _x.position.y, _x.position.z))
      _x = self.color.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f().pack(_x.poseConfidence.data, _x.colorConfidence.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.color is None:
        self.color = std_msgs.msg.String()
      if self.poseConfidence is None:
        self.poseConfidence = std_msgs.msg.Float32()
      if self.colorConfidence is None:
        self.colorConfidence = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.position.x, _x.position.y, _x.position.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.color.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.color.data = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.poseConfidence.data, _x.colorConfidence.data,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
