# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fsd_common_msgs/Visualization.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Visualization(genpy.Message):
  _md5sum = "e50abcd3e258993f1e09e11ebe66bc57"
  _type = "fsd_common_msgs/Visualization"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# visualization data 
Header header         # standard ROS message header
uint64 frame_id_num 

#error data 
float32 lat_error_front_axis
float32 lat_error_cog
float32 lat_error_rear_axis
float32 yaw_error_front_axis
float32 yaw_error_cog
float32 yaw_error_rear_axis
float32 yaw_rate_error
float32 steering_error
float32 vx_error
float32 vy_error
float32 sideslip_error
float32 motor_torq_error_lr
float32 motor_torq_error_rr
float32 motor_speed_error_lr
float32 motor_speed_error_rr
float32 error1
float32 error2
float32 error3
float32 error4

#ref visualization
float32 yaw_ref
float32 yaw_ref_front_axis
float32 yaw_ref_cog
float32 yaw_ref_rear_axis
float32 curvature_ref
float32 curvature_ref_front_axis
float32 curvature_ref_cog
float32 curvature_ref_rear_axis
float32 vx_ref
float32 vy_ref
float32 ax_ref
float32 ay_ref
float32 ref1
float32 ref2
float32 ref3
float32 ref4

#algorithm data visualization
float32 steering_without_compensation
float32 steering_feedback
float32 steering_feedforward
float32 lookforward_length
float32 yaw_rate_pre
float32 turning_radius
float32 adhesion_coefficient_pre
float32 sideslip_pre
float32 slip_angle_pre_fl
float32 slip_angle_pre_fr
float32 slip_angle_pre_rl
float32 slip_angle_pre_rr
float32 norm_force_pre_fl
float32 norm_force_pre_fr
float32 norm_force_pre_rl
float32 norm_force_pre_rr
float32 algorithm1
float32 algorithm2
float32 algorithm3
float32 algorithm4

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','frame_id_num','lat_error_front_axis','lat_error_cog','lat_error_rear_axis','yaw_error_front_axis','yaw_error_cog','yaw_error_rear_axis','yaw_rate_error','steering_error','vx_error','vy_error','sideslip_error','motor_torq_error_lr','motor_torq_error_rr','motor_speed_error_lr','motor_speed_error_rr','error1','error2','error3','error4','yaw_ref','yaw_ref_front_axis','yaw_ref_cog','yaw_ref_rear_axis','curvature_ref','curvature_ref_front_axis','curvature_ref_cog','curvature_ref_rear_axis','vx_ref','vy_ref','ax_ref','ay_ref','ref1','ref2','ref3','ref4','steering_without_compensation','steering_feedback','steering_feedforward','lookforward_length','yaw_rate_pre','turning_radius','adhesion_coefficient_pre','sideslip_pre','slip_angle_pre_fl','slip_angle_pre_fr','slip_angle_pre_rl','slip_angle_pre_rr','norm_force_pre_fl','norm_force_pre_fr','norm_force_pre_rl','norm_force_pre_rr','algorithm1','algorithm2','algorithm3','algorithm4']
  _slot_types = ['std_msgs/Header','uint64','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_id_num,lat_error_front_axis,lat_error_cog,lat_error_rear_axis,yaw_error_front_axis,yaw_error_cog,yaw_error_rear_axis,yaw_rate_error,steering_error,vx_error,vy_error,sideslip_error,motor_torq_error_lr,motor_torq_error_rr,motor_speed_error_lr,motor_speed_error_rr,error1,error2,error3,error4,yaw_ref,yaw_ref_front_axis,yaw_ref_cog,yaw_ref_rear_axis,curvature_ref,curvature_ref_front_axis,curvature_ref_cog,curvature_ref_rear_axis,vx_ref,vy_ref,ax_ref,ay_ref,ref1,ref2,ref3,ref4,steering_without_compensation,steering_feedback,steering_feedforward,lookforward_length,yaw_rate_pre,turning_radius,adhesion_coefficient_pre,sideslip_pre,slip_angle_pre_fl,slip_angle_pre_fr,slip_angle_pre_rl,slip_angle_pre_rr,norm_force_pre_fl,norm_force_pre_fr,norm_force_pre_rl,norm_force_pre_rr,algorithm1,algorithm2,algorithm3,algorithm4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Visualization, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_id_num is None:
        self.frame_id_num = 0
      if self.lat_error_front_axis is None:
        self.lat_error_front_axis = 0.
      if self.lat_error_cog is None:
        self.lat_error_cog = 0.
      if self.lat_error_rear_axis is None:
        self.lat_error_rear_axis = 0.
      if self.yaw_error_front_axis is None:
        self.yaw_error_front_axis = 0.
      if self.yaw_error_cog is None:
        self.yaw_error_cog = 0.
      if self.yaw_error_rear_axis is None:
        self.yaw_error_rear_axis = 0.
      if self.yaw_rate_error is None:
        self.yaw_rate_error = 0.
      if self.steering_error is None:
        self.steering_error = 0.
      if self.vx_error is None:
        self.vx_error = 0.
      if self.vy_error is None:
        self.vy_error = 0.
      if self.sideslip_error is None:
        self.sideslip_error = 0.
      if self.motor_torq_error_lr is None:
        self.motor_torq_error_lr = 0.
      if self.motor_torq_error_rr is None:
        self.motor_torq_error_rr = 0.
      if self.motor_speed_error_lr is None:
        self.motor_speed_error_lr = 0.
      if self.motor_speed_error_rr is None:
        self.motor_speed_error_rr = 0.
      if self.error1 is None:
        self.error1 = 0.
      if self.error2 is None:
        self.error2 = 0.
      if self.error3 is None:
        self.error3 = 0.
      if self.error4 is None:
        self.error4 = 0.
      if self.yaw_ref is None:
        self.yaw_ref = 0.
      if self.yaw_ref_front_axis is None:
        self.yaw_ref_front_axis = 0.
      if self.yaw_ref_cog is None:
        self.yaw_ref_cog = 0.
      if self.yaw_ref_rear_axis is None:
        self.yaw_ref_rear_axis = 0.
      if self.curvature_ref is None:
        self.curvature_ref = 0.
      if self.curvature_ref_front_axis is None:
        self.curvature_ref_front_axis = 0.
      if self.curvature_ref_cog is None:
        self.curvature_ref_cog = 0.
      if self.curvature_ref_rear_axis is None:
        self.curvature_ref_rear_axis = 0.
      if self.vx_ref is None:
        self.vx_ref = 0.
      if self.vy_ref is None:
        self.vy_ref = 0.
      if self.ax_ref is None:
        self.ax_ref = 0.
      if self.ay_ref is None:
        self.ay_ref = 0.
      if self.ref1 is None:
        self.ref1 = 0.
      if self.ref2 is None:
        self.ref2 = 0.
      if self.ref3 is None:
        self.ref3 = 0.
      if self.ref4 is None:
        self.ref4 = 0.
      if self.steering_without_compensation is None:
        self.steering_without_compensation = 0.
      if self.steering_feedback is None:
        self.steering_feedback = 0.
      if self.steering_feedforward is None:
        self.steering_feedforward = 0.
      if self.lookforward_length is None:
        self.lookforward_length = 0.
      if self.yaw_rate_pre is None:
        self.yaw_rate_pre = 0.
      if self.turning_radius is None:
        self.turning_radius = 0.
      if self.adhesion_coefficient_pre is None:
        self.adhesion_coefficient_pre = 0.
      if self.sideslip_pre is None:
        self.sideslip_pre = 0.
      if self.slip_angle_pre_fl is None:
        self.slip_angle_pre_fl = 0.
      if self.slip_angle_pre_fr is None:
        self.slip_angle_pre_fr = 0.
      if self.slip_angle_pre_rl is None:
        self.slip_angle_pre_rl = 0.
      if self.slip_angle_pre_rr is None:
        self.slip_angle_pre_rr = 0.
      if self.norm_force_pre_fl is None:
        self.norm_force_pre_fl = 0.
      if self.norm_force_pre_fr is None:
        self.norm_force_pre_fr = 0.
      if self.norm_force_pre_rl is None:
        self.norm_force_pre_rl = 0.
      if self.norm_force_pre_rr is None:
        self.norm_force_pre_rr = 0.
      if self.algorithm1 is None:
        self.algorithm1 = 0.
      if self.algorithm2 is None:
        self.algorithm2 = 0.
      if self.algorithm3 is None:
        self.algorithm3 = 0.
      if self.algorithm4 is None:
        self.algorithm4 = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.frame_id_num = 0
      self.lat_error_front_axis = 0.
      self.lat_error_cog = 0.
      self.lat_error_rear_axis = 0.
      self.yaw_error_front_axis = 0.
      self.yaw_error_cog = 0.
      self.yaw_error_rear_axis = 0.
      self.yaw_rate_error = 0.
      self.steering_error = 0.
      self.vx_error = 0.
      self.vy_error = 0.
      self.sideslip_error = 0.
      self.motor_torq_error_lr = 0.
      self.motor_torq_error_rr = 0.
      self.motor_speed_error_lr = 0.
      self.motor_speed_error_rr = 0.
      self.error1 = 0.
      self.error2 = 0.
      self.error3 = 0.
      self.error4 = 0.
      self.yaw_ref = 0.
      self.yaw_ref_front_axis = 0.
      self.yaw_ref_cog = 0.
      self.yaw_ref_rear_axis = 0.
      self.curvature_ref = 0.
      self.curvature_ref_front_axis = 0.
      self.curvature_ref_cog = 0.
      self.curvature_ref_rear_axis = 0.
      self.vx_ref = 0.
      self.vy_ref = 0.
      self.ax_ref = 0.
      self.ay_ref = 0.
      self.ref1 = 0.
      self.ref2 = 0.
      self.ref3 = 0.
      self.ref4 = 0.
      self.steering_without_compensation = 0.
      self.steering_feedback = 0.
      self.steering_feedforward = 0.
      self.lookforward_length = 0.
      self.yaw_rate_pre = 0.
      self.turning_radius = 0.
      self.adhesion_coefficient_pre = 0.
      self.sideslip_pre = 0.
      self.slip_angle_pre_fl = 0.
      self.slip_angle_pre_fr = 0.
      self.slip_angle_pre_rl = 0.
      self.slip_angle_pre_rr = 0.
      self.norm_force_pre_fl = 0.
      self.norm_force_pre_fr = 0.
      self.norm_force_pre_rl = 0.
      self.norm_force_pre_rr = 0.
      self.algorithm1 = 0.
      self.algorithm2 = 0.
      self.algorithm3 = 0.
      self.algorithm4 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q55f().pack(_x.frame_id_num, _x.lat_error_front_axis, _x.lat_error_cog, _x.lat_error_rear_axis, _x.yaw_error_front_axis, _x.yaw_error_cog, _x.yaw_error_rear_axis, _x.yaw_rate_error, _x.steering_error, _x.vx_error, _x.vy_error, _x.sideslip_error, _x.motor_torq_error_lr, _x.motor_torq_error_rr, _x.motor_speed_error_lr, _x.motor_speed_error_rr, _x.error1, _x.error2, _x.error3, _x.error4, _x.yaw_ref, _x.yaw_ref_front_axis, _x.yaw_ref_cog, _x.yaw_ref_rear_axis, _x.curvature_ref, _x.curvature_ref_front_axis, _x.curvature_ref_cog, _x.curvature_ref_rear_axis, _x.vx_ref, _x.vy_ref, _x.ax_ref, _x.ay_ref, _x.ref1, _x.ref2, _x.ref3, _x.ref4, _x.steering_without_compensation, _x.steering_feedback, _x.steering_feedforward, _x.lookforward_length, _x.yaw_rate_pre, _x.turning_radius, _x.adhesion_coefficient_pre, _x.sideslip_pre, _x.slip_angle_pre_fl, _x.slip_angle_pre_fr, _x.slip_angle_pre_rl, _x.slip_angle_pre_rr, _x.norm_force_pre_fl, _x.norm_force_pre_fr, _x.norm_force_pre_rl, _x.norm_force_pre_rr, _x.algorithm1, _x.algorithm2, _x.algorithm3, _x.algorithm4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 228
      (_x.frame_id_num, _x.lat_error_front_axis, _x.lat_error_cog, _x.lat_error_rear_axis, _x.yaw_error_front_axis, _x.yaw_error_cog, _x.yaw_error_rear_axis, _x.yaw_rate_error, _x.steering_error, _x.vx_error, _x.vy_error, _x.sideslip_error, _x.motor_torq_error_lr, _x.motor_torq_error_rr, _x.motor_speed_error_lr, _x.motor_speed_error_rr, _x.error1, _x.error2, _x.error3, _x.error4, _x.yaw_ref, _x.yaw_ref_front_axis, _x.yaw_ref_cog, _x.yaw_ref_rear_axis, _x.curvature_ref, _x.curvature_ref_front_axis, _x.curvature_ref_cog, _x.curvature_ref_rear_axis, _x.vx_ref, _x.vy_ref, _x.ax_ref, _x.ay_ref, _x.ref1, _x.ref2, _x.ref3, _x.ref4, _x.steering_without_compensation, _x.steering_feedback, _x.steering_feedforward, _x.lookforward_length, _x.yaw_rate_pre, _x.turning_radius, _x.adhesion_coefficient_pre, _x.sideslip_pre, _x.slip_angle_pre_fl, _x.slip_angle_pre_fr, _x.slip_angle_pre_rl, _x.slip_angle_pre_rr, _x.norm_force_pre_fl, _x.norm_force_pre_fr, _x.norm_force_pre_rl, _x.norm_force_pre_rr, _x.algorithm1, _x.algorithm2, _x.algorithm3, _x.algorithm4,) = _get_struct_Q55f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q55f().pack(_x.frame_id_num, _x.lat_error_front_axis, _x.lat_error_cog, _x.lat_error_rear_axis, _x.yaw_error_front_axis, _x.yaw_error_cog, _x.yaw_error_rear_axis, _x.yaw_rate_error, _x.steering_error, _x.vx_error, _x.vy_error, _x.sideslip_error, _x.motor_torq_error_lr, _x.motor_torq_error_rr, _x.motor_speed_error_lr, _x.motor_speed_error_rr, _x.error1, _x.error2, _x.error3, _x.error4, _x.yaw_ref, _x.yaw_ref_front_axis, _x.yaw_ref_cog, _x.yaw_ref_rear_axis, _x.curvature_ref, _x.curvature_ref_front_axis, _x.curvature_ref_cog, _x.curvature_ref_rear_axis, _x.vx_ref, _x.vy_ref, _x.ax_ref, _x.ay_ref, _x.ref1, _x.ref2, _x.ref3, _x.ref4, _x.steering_without_compensation, _x.steering_feedback, _x.steering_feedforward, _x.lookforward_length, _x.yaw_rate_pre, _x.turning_radius, _x.adhesion_coefficient_pre, _x.sideslip_pre, _x.slip_angle_pre_fl, _x.slip_angle_pre_fr, _x.slip_angle_pre_rl, _x.slip_angle_pre_rr, _x.norm_force_pre_fl, _x.norm_force_pre_fr, _x.norm_force_pre_rl, _x.norm_force_pre_rr, _x.algorithm1, _x.algorithm2, _x.algorithm3, _x.algorithm4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 228
      (_x.frame_id_num, _x.lat_error_front_axis, _x.lat_error_cog, _x.lat_error_rear_axis, _x.yaw_error_front_axis, _x.yaw_error_cog, _x.yaw_error_rear_axis, _x.yaw_rate_error, _x.steering_error, _x.vx_error, _x.vy_error, _x.sideslip_error, _x.motor_torq_error_lr, _x.motor_torq_error_rr, _x.motor_speed_error_lr, _x.motor_speed_error_rr, _x.error1, _x.error2, _x.error3, _x.error4, _x.yaw_ref, _x.yaw_ref_front_axis, _x.yaw_ref_cog, _x.yaw_ref_rear_axis, _x.curvature_ref, _x.curvature_ref_front_axis, _x.curvature_ref_cog, _x.curvature_ref_rear_axis, _x.vx_ref, _x.vy_ref, _x.ax_ref, _x.ay_ref, _x.ref1, _x.ref2, _x.ref3, _x.ref4, _x.steering_without_compensation, _x.steering_feedback, _x.steering_feedforward, _x.lookforward_length, _x.yaw_rate_pre, _x.turning_radius, _x.adhesion_coefficient_pre, _x.sideslip_pre, _x.slip_angle_pre_fl, _x.slip_angle_pre_fr, _x.slip_angle_pre_rl, _x.slip_angle_pre_rr, _x.norm_force_pre_fl, _x.norm_force_pre_fr, _x.norm_force_pre_rl, _x.norm_force_pre_rr, _x.algorithm1, _x.algorithm2, _x.algorithm3, _x.algorithm4,) = _get_struct_Q55f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Q55f = None
def _get_struct_Q55f():
    global _struct_Q55f
    if _struct_Q55f is None:
        _struct_Q55f = struct.Struct("<Q55f")
    return _struct_Q55f
