# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fsd_common_msgs/AsensingMessage.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AsensingMessage(genpy.Message):
  _md5sum = "4955c4384f1d3f0dac8b4faaad8aec51"
  _type = "fsd_common_msgs/AsensingMessage"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# # message of Asensing perception result.It is INS data. 
# Header header         # standard ROS message header
# uint64 frame_id_num  
# float32 Acc_x
# float32 Acc_y
# float32 Acc_z
# float32 Gyro_x
# float32 Gyro_y
# float32 Gyro_z
# float32 pitch
# float32 roll
# float32 heading_angle
# float32 h
# uint64 ullTimestamp
# float64 lat
# float64 lon
# float32 Vn
# float32 Ve
# float32 Vh
# uint32 GpsFlag_Pos
# uint32 NumSV
# uint32 GpsFlag_Heading
# uint64 GPS_Age
# uint32 Car_Status
# uint32 Status
# float32 std_Lat
# float32 std_Lon
# float32 std_LocalHeight
# float32 std_Heading
# float32 UTC_year
# float32 UTC_month
# float32 UTC_day
# float32 UTC_hour
# float32 UTC_min
# float32 UTC_sec
# float64 UTC_msec


# message of Asensing perception result.It is INS data. 
Header header         # standard ROS message header
uint64 frame_id_num  
float64 lat	
float64 lon
float64 h

float64 Vn	
float64 Ve
float64 Vh

float64 roll	
float64 pitch
float64 heading_angle

float64 Gyro_x
float64 Gyro_y
float64 Gyro_z

float64 Acc_x	
float64 Acc_y
float64 Acc_z

float32 std_Lat	
float32 std_Lon
float32 std_LocalHeight

float32 north_velocity_std	
float32 east_velocity_std
float32 ground_velocity_std


float32 roll_std	
float32 pitch_std
float32 std_Heading 


uint32 Status	
uint32 GpsFlag_Pos	 

float64 gps_week_number

float64 ullTimestamp		

float32 temperature	

uint32 Car_Status	



uint32 GpsFlag_Heading		
uint32 NumSV		




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','frame_id_num','lat','lon','h','Vn','Ve','Vh','roll','pitch','heading_angle','Gyro_x','Gyro_y','Gyro_z','Acc_x','Acc_y','Acc_z','std_Lat','std_Lon','std_LocalHeight','north_velocity_std','east_velocity_std','ground_velocity_std','roll_std','pitch_std','std_Heading','Status','GpsFlag_Pos','gps_week_number','ullTimestamp','temperature','Car_Status','GpsFlag_Heading','NumSV']
  _slot_types = ['std_msgs/Header','uint64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint32','uint32','float64','float64','float32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_id_num,lat,lon,h,Vn,Ve,Vh,roll,pitch,heading_angle,Gyro_x,Gyro_y,Gyro_z,Acc_x,Acc_y,Acc_z,std_Lat,std_Lon,std_LocalHeight,north_velocity_std,east_velocity_std,ground_velocity_std,roll_std,pitch_std,std_Heading,Status,GpsFlag_Pos,gps_week_number,ullTimestamp,temperature,Car_Status,GpsFlag_Heading,NumSV

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AsensingMessage, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_id_num is None:
        self.frame_id_num = 0
      if self.lat is None:
        self.lat = 0.
      if self.lon is None:
        self.lon = 0.
      if self.h is None:
        self.h = 0.
      if self.Vn is None:
        self.Vn = 0.
      if self.Ve is None:
        self.Ve = 0.
      if self.Vh is None:
        self.Vh = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.heading_angle is None:
        self.heading_angle = 0.
      if self.Gyro_x is None:
        self.Gyro_x = 0.
      if self.Gyro_y is None:
        self.Gyro_y = 0.
      if self.Gyro_z is None:
        self.Gyro_z = 0.
      if self.Acc_x is None:
        self.Acc_x = 0.
      if self.Acc_y is None:
        self.Acc_y = 0.
      if self.Acc_z is None:
        self.Acc_z = 0.
      if self.std_Lat is None:
        self.std_Lat = 0.
      if self.std_Lon is None:
        self.std_Lon = 0.
      if self.std_LocalHeight is None:
        self.std_LocalHeight = 0.
      if self.north_velocity_std is None:
        self.north_velocity_std = 0.
      if self.east_velocity_std is None:
        self.east_velocity_std = 0.
      if self.ground_velocity_std is None:
        self.ground_velocity_std = 0.
      if self.roll_std is None:
        self.roll_std = 0.
      if self.pitch_std is None:
        self.pitch_std = 0.
      if self.std_Heading is None:
        self.std_Heading = 0.
      if self.Status is None:
        self.Status = 0
      if self.GpsFlag_Pos is None:
        self.GpsFlag_Pos = 0
      if self.gps_week_number is None:
        self.gps_week_number = 0.
      if self.ullTimestamp is None:
        self.ullTimestamp = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.Car_Status is None:
        self.Car_Status = 0
      if self.GpsFlag_Heading is None:
        self.GpsFlag_Heading = 0
      if self.NumSV is None:
        self.NumSV = 0
    else:
      self.header = std_msgs.msg.Header()
      self.frame_id_num = 0
      self.lat = 0.
      self.lon = 0.
      self.h = 0.
      self.Vn = 0.
      self.Ve = 0.
      self.Vh = 0.
      self.roll = 0.
      self.pitch = 0.
      self.heading_angle = 0.
      self.Gyro_x = 0.
      self.Gyro_y = 0.
      self.Gyro_z = 0.
      self.Acc_x = 0.
      self.Acc_y = 0.
      self.Acc_z = 0.
      self.std_Lat = 0.
      self.std_Lon = 0.
      self.std_LocalHeight = 0.
      self.north_velocity_std = 0.
      self.east_velocity_std = 0.
      self.ground_velocity_std = 0.
      self.roll_std = 0.
      self.pitch_std = 0.
      self.std_Heading = 0.
      self.Status = 0
      self.GpsFlag_Pos = 0
      self.gps_week_number = 0.
      self.ullTimestamp = 0.
      self.temperature = 0.
      self.Car_Status = 0
      self.GpsFlag_Heading = 0
      self.NumSV = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q15d9f2I2df3I().pack(_x.frame_id_num, _x.lat, _x.lon, _x.h, _x.Vn, _x.Ve, _x.Vh, _x.roll, _x.pitch, _x.heading_angle, _x.Gyro_x, _x.Gyro_y, _x.Gyro_z, _x.Acc_x, _x.Acc_y, _x.Acc_z, _x.std_Lat, _x.std_Lon, _x.std_LocalHeight, _x.north_velocity_std, _x.east_velocity_std, _x.ground_velocity_std, _x.roll_std, _x.pitch_std, _x.std_Heading, _x.Status, _x.GpsFlag_Pos, _x.gps_week_number, _x.ullTimestamp, _x.temperature, _x.Car_Status, _x.GpsFlag_Heading, _x.NumSV))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 204
      (_x.frame_id_num, _x.lat, _x.lon, _x.h, _x.Vn, _x.Ve, _x.Vh, _x.roll, _x.pitch, _x.heading_angle, _x.Gyro_x, _x.Gyro_y, _x.Gyro_z, _x.Acc_x, _x.Acc_y, _x.Acc_z, _x.std_Lat, _x.std_Lon, _x.std_LocalHeight, _x.north_velocity_std, _x.east_velocity_std, _x.ground_velocity_std, _x.roll_std, _x.pitch_std, _x.std_Heading, _x.Status, _x.GpsFlag_Pos, _x.gps_week_number, _x.ullTimestamp, _x.temperature, _x.Car_Status, _x.GpsFlag_Heading, _x.NumSV,) = _get_struct_Q15d9f2I2df3I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Q15d9f2I2df3I().pack(_x.frame_id_num, _x.lat, _x.lon, _x.h, _x.Vn, _x.Ve, _x.Vh, _x.roll, _x.pitch, _x.heading_angle, _x.Gyro_x, _x.Gyro_y, _x.Gyro_z, _x.Acc_x, _x.Acc_y, _x.Acc_z, _x.std_Lat, _x.std_Lon, _x.std_LocalHeight, _x.north_velocity_std, _x.east_velocity_std, _x.ground_velocity_std, _x.roll_std, _x.pitch_std, _x.std_Heading, _x.Status, _x.GpsFlag_Pos, _x.gps_week_number, _x.ullTimestamp, _x.temperature, _x.Car_Status, _x.GpsFlag_Heading, _x.NumSV))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 204
      (_x.frame_id_num, _x.lat, _x.lon, _x.h, _x.Vn, _x.Ve, _x.Vh, _x.roll, _x.pitch, _x.heading_angle, _x.Gyro_x, _x.Gyro_y, _x.Gyro_z, _x.Acc_x, _x.Acc_y, _x.Acc_z, _x.std_Lat, _x.std_Lon, _x.std_LocalHeight, _x.north_velocity_std, _x.east_velocity_std, _x.ground_velocity_std, _x.roll_std, _x.pitch_std, _x.std_Heading, _x.Status, _x.GpsFlag_Pos, _x.gps_week_number, _x.ullTimestamp, _x.temperature, _x.Car_Status, _x.GpsFlag_Heading, _x.NumSV,) = _get_struct_Q15d9f2I2df3I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Q15d9f2I2df3I = None
def _get_struct_Q15d9f2I2df3I():
    global _struct_Q15d9f2I2df3I
    if _struct_Q15d9f2I2df3I is None:
        _struct_Q15d9f2I2df3I = struct.Struct("<Q15d9f2I2df3I")
    return _struct_Q15d9f2I2df3I
