// Generated by gencpp from file fsd_common_msgs/AsensingMessage.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_ASENSINGMESSAGE_H
#define FSD_COMMON_MSGS_MESSAGE_ASENSINGMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct AsensingMessage_
{
  typedef AsensingMessage_<ContainerAllocator> Type;

  AsensingMessage_()
    : header()
    , frame_id_num(0)
    , lat(0.0)
    , lon(0.0)
    , h(0.0)
    , Vn(0.0)
    , Ve(0.0)
    , Vh(0.0)
    , roll(0.0)
    , pitch(0.0)
    , heading_angle(0.0)
    , Gyro_x(0.0)
    , Gyro_y(0.0)
    , Gyro_z(0.0)
    , Acc_x(0.0)
    , Acc_y(0.0)
    , Acc_z(0.0)
    , std_Lat(0.0)
    , std_Lon(0.0)
    , std_LocalHeight(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , ground_velocity_std(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , std_Heading(0.0)
    , Status(0)
    , GpsFlag_Pos(0)
    , gps_week_number(0.0)
    , ullTimestamp(0.0)
    , temperature(0.0)
    , Car_Status(0)
    , GpsFlag_Heading(0)
    , NumSV(0)  {
    }
  AsensingMessage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_id_num(0)
    , lat(0.0)
    , lon(0.0)
    , h(0.0)
    , Vn(0.0)
    , Ve(0.0)
    , Vh(0.0)
    , roll(0.0)
    , pitch(0.0)
    , heading_angle(0.0)
    , Gyro_x(0.0)
    , Gyro_y(0.0)
    , Gyro_z(0.0)
    , Acc_x(0.0)
    , Acc_y(0.0)
    , Acc_z(0.0)
    , std_Lat(0.0)
    , std_Lon(0.0)
    , std_LocalHeight(0.0)
    , north_velocity_std(0.0)
    , east_velocity_std(0.0)
    , ground_velocity_std(0.0)
    , roll_std(0.0)
    , pitch_std(0.0)
    , std_Heading(0.0)
    , Status(0)
    , GpsFlag_Pos(0)
    , gps_week_number(0.0)
    , ullTimestamp(0.0)
    , temperature(0.0)
    , Car_Status(0)
    , GpsFlag_Heading(0)
    , NumSV(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _frame_id_num_type;
  _frame_id_num_type frame_id_num;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _h_type;
  _h_type h;

   typedef double _Vn_type;
  _Vn_type Vn;

   typedef double _Ve_type;
  _Ve_type Ve;

   typedef double _Vh_type;
  _Vh_type Vh;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _heading_angle_type;
  _heading_angle_type heading_angle;

   typedef double _Gyro_x_type;
  _Gyro_x_type Gyro_x;

   typedef double _Gyro_y_type;
  _Gyro_y_type Gyro_y;

   typedef double _Gyro_z_type;
  _Gyro_z_type Gyro_z;

   typedef double _Acc_x_type;
  _Acc_x_type Acc_x;

   typedef double _Acc_y_type;
  _Acc_y_type Acc_y;

   typedef double _Acc_z_type;
  _Acc_z_type Acc_z;

   typedef float _std_Lat_type;
  _std_Lat_type std_Lat;

   typedef float _std_Lon_type;
  _std_Lon_type std_Lon;

   typedef float _std_LocalHeight_type;
  _std_LocalHeight_type std_LocalHeight;

   typedef float _north_velocity_std_type;
  _north_velocity_std_type north_velocity_std;

   typedef float _east_velocity_std_type;
  _east_velocity_std_type east_velocity_std;

   typedef float _ground_velocity_std_type;
  _ground_velocity_std_type ground_velocity_std;

   typedef float _roll_std_type;
  _roll_std_type roll_std;

   typedef float _pitch_std_type;
  _pitch_std_type pitch_std;

   typedef float _std_Heading_type;
  _std_Heading_type std_Heading;

   typedef uint32_t _Status_type;
  _Status_type Status;

   typedef uint32_t _GpsFlag_Pos_type;
  _GpsFlag_Pos_type GpsFlag_Pos;

   typedef double _gps_week_number_type;
  _gps_week_number_type gps_week_number;

   typedef double _ullTimestamp_type;
  _ullTimestamp_type ullTimestamp;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef uint32_t _Car_Status_type;
  _Car_Status_type Car_Status;

   typedef uint32_t _GpsFlag_Heading_type;
  _GpsFlag_Heading_type GpsFlag_Heading;

   typedef uint32_t _NumSV_type;
  _NumSV_type NumSV;





  typedef boost::shared_ptr< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> const> ConstPtr;

}; // struct AsensingMessage_

typedef ::fsd_common_msgs::AsensingMessage_<std::allocator<void> > AsensingMessage;

typedef boost::shared_ptr< ::fsd_common_msgs::AsensingMessage > AsensingMessagePtr;
typedef boost::shared_ptr< ::fsd_common_msgs::AsensingMessage const> AsensingMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_id_num == rhs.frame_id_num &&
    lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon &&
    lhs.h == rhs.h &&
    lhs.Vn == rhs.Vn &&
    lhs.Ve == rhs.Ve &&
    lhs.Vh == rhs.Vh &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.heading_angle == rhs.heading_angle &&
    lhs.Gyro_x == rhs.Gyro_x &&
    lhs.Gyro_y == rhs.Gyro_y &&
    lhs.Gyro_z == rhs.Gyro_z &&
    lhs.Acc_x == rhs.Acc_x &&
    lhs.Acc_y == rhs.Acc_y &&
    lhs.Acc_z == rhs.Acc_z &&
    lhs.std_Lat == rhs.std_Lat &&
    lhs.std_Lon == rhs.std_Lon &&
    lhs.std_LocalHeight == rhs.std_LocalHeight &&
    lhs.north_velocity_std == rhs.north_velocity_std &&
    lhs.east_velocity_std == rhs.east_velocity_std &&
    lhs.ground_velocity_std == rhs.ground_velocity_std &&
    lhs.roll_std == rhs.roll_std &&
    lhs.pitch_std == rhs.pitch_std &&
    lhs.std_Heading == rhs.std_Heading &&
    lhs.Status == rhs.Status &&
    lhs.GpsFlag_Pos == rhs.GpsFlag_Pos &&
    lhs.gps_week_number == rhs.gps_week_number &&
    lhs.ullTimestamp == rhs.ullTimestamp &&
    lhs.temperature == rhs.temperature &&
    lhs.Car_Status == rhs.Car_Status &&
    lhs.GpsFlag_Heading == rhs.GpsFlag_Heading &&
    lhs.NumSV == rhs.NumSV;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4955c4384f1d3f0dac8b4faaad8aec51";
  }

  static const char* value(const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4955c4384f1d3f0dULL;
  static const uint64_t static_value2 = 0xac8b4faaad8aec51ULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/AsensingMessage";
  }

  static const char* value(const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# # message of Asensing perception result.It is INS data. \n"
"# Header header         # standard ROS message header\n"
"# uint64 frame_id_num  \n"
"# float32 Acc_x\n"
"# float32 Acc_y\n"
"# float32 Acc_z\n"
"# float32 Gyro_x\n"
"# float32 Gyro_y\n"
"# float32 Gyro_z\n"
"# float32 pitch\n"
"# float32 roll\n"
"# float32 heading_angle\n"
"# float32 h\n"
"# uint64 ullTimestamp\n"
"# float64 lat\n"
"# float64 lon\n"
"# float32 Vn\n"
"# float32 Ve\n"
"# float32 Vh\n"
"# uint32 GpsFlag_Pos\n"
"# uint32 NumSV\n"
"# uint32 GpsFlag_Heading\n"
"# uint64 GPS_Age\n"
"# uint32 Car_Status\n"
"# uint32 Status\n"
"# float32 std_Lat\n"
"# float32 std_Lon\n"
"# float32 std_LocalHeight\n"
"# float32 std_Heading\n"
"# float32 UTC_year\n"
"# float32 UTC_month\n"
"# float32 UTC_day\n"
"# float32 UTC_hour\n"
"# float32 UTC_min\n"
"# float32 UTC_sec\n"
"# float64 UTC_msec\n"
"\n"
"\n"
"# message of Asensing perception result.It is INS data. \n"
"Header header         # standard ROS message header\n"
"uint64 frame_id_num  \n"
"float64 lat	\n"
"float64 lon\n"
"float64 h\n"
"\n"
"float64 Vn	\n"
"float64 Ve\n"
"float64 Vh\n"
"\n"
"float64 roll	\n"
"float64 pitch\n"
"float64 heading_angle\n"
"\n"
"float64 Gyro_x\n"
"float64 Gyro_y\n"
"float64 Gyro_z\n"
"\n"
"float64 Acc_x	\n"
"float64 Acc_y\n"
"float64 Acc_z\n"
"\n"
"float32 std_Lat	\n"
"float32 std_Lon\n"
"float32 std_LocalHeight\n"
"\n"
"float32 north_velocity_std	\n"
"float32 east_velocity_std\n"
"float32 ground_velocity_std\n"
"\n"
"\n"
"float32 roll_std	\n"
"float32 pitch_std\n"
"float32 std_Heading \n"
"\n"
"\n"
"uint32 Status	\n"
"uint32 GpsFlag_Pos	 \n"
"\n"
"float64 gps_week_number\n"
"\n"
"float64 ullTimestamp		\n"
"\n"
"float32 temperature	\n"
"\n"
"uint32 Car_Status	\n"
"\n"
"\n"
"\n"
"uint32 GpsFlag_Heading		\n"
"uint32 NumSV		\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_id_num);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.h);
      stream.next(m.Vn);
      stream.next(m.Ve);
      stream.next(m.Vh);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.heading_angle);
      stream.next(m.Gyro_x);
      stream.next(m.Gyro_y);
      stream.next(m.Gyro_z);
      stream.next(m.Acc_x);
      stream.next(m.Acc_y);
      stream.next(m.Acc_z);
      stream.next(m.std_Lat);
      stream.next(m.std_Lon);
      stream.next(m.std_LocalHeight);
      stream.next(m.north_velocity_std);
      stream.next(m.east_velocity_std);
      stream.next(m.ground_velocity_std);
      stream.next(m.roll_std);
      stream.next(m.pitch_std);
      stream.next(m.std_Heading);
      stream.next(m.Status);
      stream.next(m.GpsFlag_Pos);
      stream.next(m.gps_week_number);
      stream.next(m.ullTimestamp);
      stream.next(m.temperature);
      stream.next(m.Car_Status);
      stream.next(m.GpsFlag_Heading);
      stream.next(m.NumSV);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AsensingMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::AsensingMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::AsensingMessage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_id_num: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_id_num);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
    s << indent << "Vn: ";
    Printer<double>::stream(s, indent + "  ", v.Vn);
    s << indent << "Ve: ";
    Printer<double>::stream(s, indent + "  ", v.Ve);
    s << indent << "Vh: ";
    Printer<double>::stream(s, indent + "  ", v.Vh);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "heading_angle: ";
    Printer<double>::stream(s, indent + "  ", v.heading_angle);
    s << indent << "Gyro_x: ";
    Printer<double>::stream(s, indent + "  ", v.Gyro_x);
    s << indent << "Gyro_y: ";
    Printer<double>::stream(s, indent + "  ", v.Gyro_y);
    s << indent << "Gyro_z: ";
    Printer<double>::stream(s, indent + "  ", v.Gyro_z);
    s << indent << "Acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.Acc_x);
    s << indent << "Acc_y: ";
    Printer<double>::stream(s, indent + "  ", v.Acc_y);
    s << indent << "Acc_z: ";
    Printer<double>::stream(s, indent + "  ", v.Acc_z);
    s << indent << "std_Lat: ";
    Printer<float>::stream(s, indent + "  ", v.std_Lat);
    s << indent << "std_Lon: ";
    Printer<float>::stream(s, indent + "  ", v.std_Lon);
    s << indent << "std_LocalHeight: ";
    Printer<float>::stream(s, indent + "  ", v.std_LocalHeight);
    s << indent << "north_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.north_velocity_std);
    s << indent << "east_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.east_velocity_std);
    s << indent << "ground_velocity_std: ";
    Printer<float>::stream(s, indent + "  ", v.ground_velocity_std);
    s << indent << "roll_std: ";
    Printer<float>::stream(s, indent + "  ", v.roll_std);
    s << indent << "pitch_std: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std);
    s << indent << "std_Heading: ";
    Printer<float>::stream(s, indent + "  ", v.std_Heading);
    s << indent << "Status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Status);
    s << indent << "GpsFlag_Pos: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.GpsFlag_Pos);
    s << indent << "gps_week_number: ";
    Printer<double>::stream(s, indent + "  ", v.gps_week_number);
    s << indent << "ullTimestamp: ";
    Printer<double>::stream(s, indent + "  ", v.ullTimestamp);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "Car_Status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Car_Status);
    s << indent << "GpsFlag_Heading: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.GpsFlag_Heading);
    s << indent << "NumSV: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.NumSV);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_ASENSINGMESSAGE_H
