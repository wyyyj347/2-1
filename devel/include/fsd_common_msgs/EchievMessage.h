// Generated by gencpp from file fsd_common_msgs/EchievMessage.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_ECHIEVMESSAGE_H
#define FSD_COMMON_MSGS_MESSAGE_ECHIEVMESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct EchievMessage_
{
  typedef EchievMessage_<ContainerAllocator> Type;

  EchievMessage_()
    : header()
    , frame_id_num(0)
    , ullTimestamp(0)
    , lat(0.0)
    , lon(0.0)
    , h(0.0)
    , Vn(0.0)
    , Ve(0.0)
    , Vh(0.0)
    , roll(0.0)
    , Pitch(0.0)
    , yaw(0.0)
    , Acc_x(0.0)
    , Acc_y(0.0)
    , Acc_z(0.0)
    , Gyro_x(0.0)
    , Gyro_y(0.0)
    , Gyro_z(0.0)
    , state(0)
    , GPSState(0)  {
    }
  EchievMessage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_id_num(0)
    , ullTimestamp(0)
    , lat(0.0)
    , lon(0.0)
    , h(0.0)
    , Vn(0.0)
    , Ve(0.0)
    , Vh(0.0)
    , roll(0.0)
    , Pitch(0.0)
    , yaw(0.0)
    , Acc_x(0.0)
    , Acc_y(0.0)
    , Acc_z(0.0)
    , Gyro_x(0.0)
    , Gyro_y(0.0)
    , Gyro_z(0.0)
    , state(0)
    , GPSState(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _frame_id_num_type;
  _frame_id_num_type frame_id_num;

   typedef uint64_t _ullTimestamp_type;
  _ullTimestamp_type ullTimestamp;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;

   typedef float _h_type;
  _h_type h;

   typedef float _Vn_type;
  _Vn_type Vn;

   typedef float _Ve_type;
  _Ve_type Ve;

   typedef float _Vh_type;
  _Vh_type Vh;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _Pitch_type;
  _Pitch_type Pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _Acc_x_type;
  _Acc_x_type Acc_x;

   typedef float _Acc_y_type;
  _Acc_y_type Acc_y;

   typedef float _Acc_z_type;
  _Acc_z_type Acc_z;

   typedef float _Gyro_x_type;
  _Gyro_x_type Gyro_x;

   typedef float _Gyro_y_type;
  _Gyro_y_type Gyro_y;

   typedef float _Gyro_z_type;
  _Gyro_z_type Gyro_z;

   typedef uint8_t _state_type;
  _state_type state;

   typedef uint8_t _GPSState_type;
  _GPSState_type GPSState;





  typedef boost::shared_ptr< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> const> ConstPtr;

}; // struct EchievMessage_

typedef ::fsd_common_msgs::EchievMessage_<std::allocator<void> > EchievMessage;

typedef boost::shared_ptr< ::fsd_common_msgs::EchievMessage > EchievMessagePtr;
typedef boost::shared_ptr< ::fsd_common_msgs::EchievMessage const> EchievMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::EchievMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::EchievMessage_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::EchievMessage_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_id_num == rhs.frame_id_num &&
    lhs.ullTimestamp == rhs.ullTimestamp &&
    lhs.lat == rhs.lat &&
    lhs.lon == rhs.lon &&
    lhs.h == rhs.h &&
    lhs.Vn == rhs.Vn &&
    lhs.Ve == rhs.Ve &&
    lhs.Vh == rhs.Vh &&
    lhs.roll == rhs.roll &&
    lhs.Pitch == rhs.Pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.Acc_x == rhs.Acc_x &&
    lhs.Acc_y == rhs.Acc_y &&
    lhs.Acc_z == rhs.Acc_z &&
    lhs.Gyro_x == rhs.Gyro_x &&
    lhs.Gyro_y == rhs.Gyro_y &&
    lhs.Gyro_z == rhs.Gyro_z &&
    lhs.state == rhs.state &&
    lhs.GPSState == rhs.GPSState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::EchievMessage_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::EchievMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5074c8a56ee5217df1b459e01316b985";
  }

  static const char* value(const ::fsd_common_msgs::EchievMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5074c8a56ee5217dULL;
  static const uint64_t static_value2 = 0xf1b459e01316b985ULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/EchievMessage";
  }

  static const char* value(const ::fsd_common_msgs::EchievMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#   echiev_perception ,message of echiev perception result \n"
"Header header         # standard ROS message header\n"
"uint64 frame_id_num  \n"
"uint64 ullTimestamp\n"
"float64 lat\n"
"float64 lon\n"
"float32 h\n"
"float32 Vn\n"
"float32 Ve\n"
"float32 Vh\n"
"float32 roll\n"
"float32 Pitch\n"
"float32 yaw\n"
"float32 Acc_x\n"
"float32 Acc_y\n"
"float32 Acc_z\n"
"float32 Gyro_x\n"
"float32 Gyro_y\n"
"float32 Gyro_z\n"
"uint8 state\n"
"uint8 GPSState\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fsd_common_msgs::EchievMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_id_num);
      stream.next(m.ullTimestamp);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.h);
      stream.next(m.Vn);
      stream.next(m.Ve);
      stream.next(m.Vh);
      stream.next(m.roll);
      stream.next(m.Pitch);
      stream.next(m.yaw);
      stream.next(m.Acc_x);
      stream.next(m.Acc_y);
      stream.next(m.Acc_z);
      stream.next(m.Gyro_x);
      stream.next(m.Gyro_y);
      stream.next(m.Gyro_z);
      stream.next(m.state);
      stream.next(m.GPSState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EchievMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::EchievMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::EchievMessage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_id_num: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_id_num);
    s << indent << "ullTimestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.ullTimestamp);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
    s << indent << "Vn: ";
    Printer<float>::stream(s, indent + "  ", v.Vn);
    s << indent << "Ve: ";
    Printer<float>::stream(s, indent + "  ", v.Ve);
    s << indent << "Vh: ";
    Printer<float>::stream(s, indent + "  ", v.Vh);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "Acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.Acc_x);
    s << indent << "Acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.Acc_y);
    s << indent << "Acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.Acc_z);
    s << indent << "Gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.Gyro_x);
    s << indent << "Gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.Gyro_y);
    s << indent << "Gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.Gyro_z);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "GPSState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GPSState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_ECHIEVMESSAGE_H
