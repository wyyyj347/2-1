// Generated by gencpp from file fsd_common_msgs/ConeDbscan.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_CONEDBSCAN_H
#define FSD_COMMON_MSGS_MESSAGE_CONEDBSCAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/String.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct ConeDbscan_
{
  typedef ConeDbscan_<ContainerAllocator> Type;

  ConeDbscan_()
    : position()
    , color()
    , poseConfidence()
    , colorConfidence()
    , cluster(0)
    , pointType(0)
    , pts(0)
    , visited(0)
    , corepts()  {
    }
  ConeDbscan_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , color(_alloc)
    , poseConfidence(_alloc)
    , colorConfidence(_alloc)
    , cluster(0)
    , pointType(0)
    , pts(0)
    , visited(0)
    , corepts(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::std_msgs::String_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _poseConfidence_type;
  _poseConfidence_type poseConfidence;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _colorConfidence_type;
  _colorConfidence_type colorConfidence;

   typedef uint8_t _cluster_type;
  _cluster_type cluster;

   typedef uint8_t _pointType_type;
  _pointType_type pointType;

   typedef uint8_t _pts_type;
  _pts_type pts;

   typedef uint8_t _visited_type;
  _visited_type visited;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _corepts_type;
  _corepts_type corepts;





  typedef boost::shared_ptr< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> const> ConstPtr;

}; // struct ConeDbscan_

typedef ::fsd_common_msgs::ConeDbscan_<std::allocator<void> > ConeDbscan;

typedef boost::shared_ptr< ::fsd_common_msgs::ConeDbscan > ConeDbscanPtr;
typedef boost::shared_ptr< ::fsd_common_msgs::ConeDbscan const> ConeDbscanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.color == rhs.color &&
    lhs.poseConfidence == rhs.poseConfidence &&
    lhs.colorConfidence == rhs.colorConfidence &&
    lhs.cluster == rhs.cluster &&
    lhs.pointType == rhs.pointType &&
    lhs.pts == rhs.pts &&
    lhs.visited == rhs.visited &&
    lhs.corepts == rhs.corepts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75070dcbcbfe5bd7b83a970d1d4c6e4a";
  }

  static const char* value(const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75070dcbcbfe5bd7ULL;
  static const uint64_t static_value2 = 0xb83a970d1d4c6e4aULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/ConeDbscan";
  }

  static const char* value(const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point position  	      # coordinate of cone in [x, y]\n"
"std_msgs/String color                 # color of cone, 'b' = blue, 'y' = yellow, 'o' = orange\n"
"std_msgs/Float32 poseConfidence   	      # confidence of cone detect\n"
"std_msgs/Float32 colorConfidence   	      # confidence of cone detect\n"
"\n"
"uint8 cluster\n"
"uint8 pointType\n"
"uint8 pts\n"
"uint8 visited\n"
"uint8[] corepts\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.color);
      stream.next(m.poseConfidence);
      stream.next(m.colorConfidence);
      stream.next(m.cluster);
      stream.next(m.pointType);
      stream.next(m.pts);
      stream.next(m.visited);
      stream.next(m.corepts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConeDbscan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::ConeDbscan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::ConeDbscan_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "poseConfidence: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.poseConfidence);
    s << indent << "colorConfidence: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.colorConfidence);
    s << indent << "cluster: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cluster);
    s << indent << "pointType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pointType);
    s << indent << "pts: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pts);
    s << indent << "visited: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visited);
    s << indent << "corepts[]" << std::endl;
    for (size_t i = 0; i < v.corepts.size(); ++i)
    {
      s << indent << "  corepts[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.corepts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_CONEDBSCAN_H
