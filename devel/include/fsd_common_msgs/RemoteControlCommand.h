// Generated by gencpp from file fsd_common_msgs/RemoteControlCommand.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_REMOTECONTROLCOMMAND_H
#define FSD_COMMON_MSGS_MESSAGE_REMOTECONTROLCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct RemoteControlCommand_
{
  typedef RemoteControlCommand_<ContainerAllocator> Type;

  RemoteControlCommand_()
    : header()
    , throttle(0.0)
    , steering_angle(0.0)
    , go(0.0)
    , stop(0.0)
    , test1(0.0)  {
    }
  RemoteControlCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , throttle(0.0)
    , steering_angle(0.0)
    , go(0.0)
    , stop(0.0)
    , test1(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef float _go_type;
  _go_type go;

   typedef float _stop_type;
  _stop_type stop;

   typedef float _test1_type;
  _test1_type test1;





  typedef boost::shared_ptr< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> const> ConstPtr;

}; // struct RemoteControlCommand_

typedef ::fsd_common_msgs::RemoteControlCommand_<std::allocator<void> > RemoteControlCommand;

typedef boost::shared_ptr< ::fsd_common_msgs::RemoteControlCommand > RemoteControlCommandPtr;
typedef boost::shared_ptr< ::fsd_common_msgs::RemoteControlCommand const> RemoteControlCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.throttle == rhs.throttle &&
    lhs.steering_angle == rhs.steering_angle &&
    lhs.go == rhs.go &&
    lhs.stop == rhs.stop &&
    lhs.test1 == rhs.test1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5656b8c3355ede3402b177b24076fb8";
  }

  static const char* value(const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5656b8c3355ede3ULL;
  static const uint64_t static_value2 = 0x402b177b24076fb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/RemoteControlCommand";
  }

  static const char* value(const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float32 throttle        # Throttle value between [-1, 1]\n"
"float32 steering_angle  # Steering angle value between [-1, 1], where left < 0, right > 0\n"
"\n"
"float32 go      # 0,1\n"
"float32 stop    # 0,1\n"
"float32 test1   # 0,1\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.throttle);
      stream.next(m.steering_angle);
      stream.next(m.go);
      stream.next(m.stop);
      stream.next(m.test1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RemoteControlCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::RemoteControlCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "go: ";
    Printer<float>::stream(s, indent + "  ", v.go);
    s << indent << "stop: ";
    Printer<float>::stream(s, indent + "  ", v.stop);
    s << indent << "test1: ";
    Printer<float>::stream(s, indent + "  ", v.test1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_REMOTECONTROLCOMMAND_H
