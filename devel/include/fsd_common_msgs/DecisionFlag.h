// Generated by gencpp from file fsd_common_msgs/DecisionFlag.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_DECISIONFLAG_H
#define FSD_COMMON_MSGS_MESSAGE_DECISIONFLAG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct DecisionFlag_
{
  typedef DecisionFlag_<ContainerAllocator> Type;

  DecisionFlag_()
    : header()
    , lap1State(0)
    , lap2State(0)
    , mapState(0)  {
    }
  DecisionFlag_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lap1State(0)
    , lap2State(0)
    , mapState(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _lap1State_type;
  _lap1State_type lap1State;

   typedef uint8_t _lap2State_type;
  _lap2State_type lap2State;

   typedef uint8_t _mapState_type;
  _mapState_type mapState;





  typedef boost::shared_ptr< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> const> ConstPtr;

}; // struct DecisionFlag_

typedef ::fsd_common_msgs::DecisionFlag_<std::allocator<void> > DecisionFlag;

typedef boost::shared_ptr< ::fsd_common_msgs::DecisionFlag > DecisionFlagPtr;
typedef boost::shared_ptr< ::fsd_common_msgs::DecisionFlag const> DecisionFlagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lap1State == rhs.lap1State &&
    lhs.lap2State == rhs.lap2State &&
    lhs.mapState == rhs.mapState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24260ae5a14098e9f25c589b2a39deba";
  }

  static const char* value(const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24260ae5a14098e9ULL;
  static const uint64_t static_value2 = 0xf25c589b2a39debaULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/DecisionFlag";
  }

  static const char* value(const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"#############该msg用于紧急切换控制策略目前仅作设想，未实装#################\n"
"uint8 lap1State #0为正常，1为规划模块异常--->触发EBS\n"
"uint8 lap2State #0为正常，1为规划模块异常、SLAM正常--->跟踪首圈轨迹/Ribbon\n"
"                #        2为规划模块异常、SLAM异常(给不出图或者给的图不好)--->触发EBS\n"
"                #        3为规划模块正常、SLAM正常--->但选用Ribbon\n"
"\n"
"uint8 mapState  #0表示第二圈根据lap2State选择控制策略，1表示一直用局部，此flag优先级应高于lap2State  \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lap1State);
      stream.next(m.lap2State);
      stream.next(m.mapState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DecisionFlag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::DecisionFlag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::DecisionFlag_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lap1State: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lap1State);
    s << indent << "lap2State: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lap2State);
    s << indent << "mapState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mapState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_DECISIONFLAG_H
