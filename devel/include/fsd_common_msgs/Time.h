// Generated by gencpp from file fsd_common_msgs/Time.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_TIME_H
#define FSD_COMMON_MSGS_MESSAGE_TIME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct Time_
{
  typedef Time_<ContainerAllocator> Type;

  Time_()
    : header()
    , frame_id_num(0)
    , sum_compute_time(0.0)
    , control_compute_time(0.0)
    , boundary_detector_compute_time(0.0)
    , line_detector_compute_time(0.0)
    , skidpad_detector_compute_time(0.0)
    , lidar_detection_compute_time(0.0)
    , camera_detection_compute_time(0.0)
    , fusion_detection_compute_time(0.0)
    , time2(0.0)
    , time3(0.0)
    , time4(0.0)
    , time5(0.0)
    , time6(0.0)
    , time7(0.0)
    , time8(0.0)
    , time9(0.0)  {
    }
  Time_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_id_num(0)
    , sum_compute_time(0.0)
    , control_compute_time(0.0)
    , boundary_detector_compute_time(0.0)
    , line_detector_compute_time(0.0)
    , skidpad_detector_compute_time(0.0)
    , lidar_detection_compute_time(0.0)
    , camera_detection_compute_time(0.0)
    , fusion_detection_compute_time(0.0)
    , time2(0.0)
    , time3(0.0)
    , time4(0.0)
    , time5(0.0)
    , time6(0.0)
    , time7(0.0)
    , time8(0.0)
    , time9(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _frame_id_num_type;
  _frame_id_num_type frame_id_num;

   typedef float _sum_compute_time_type;
  _sum_compute_time_type sum_compute_time;

   typedef float _control_compute_time_type;
  _control_compute_time_type control_compute_time;

   typedef float _boundary_detector_compute_time_type;
  _boundary_detector_compute_time_type boundary_detector_compute_time;

   typedef float _line_detector_compute_time_type;
  _line_detector_compute_time_type line_detector_compute_time;

   typedef float _skidpad_detector_compute_time_type;
  _skidpad_detector_compute_time_type skidpad_detector_compute_time;

   typedef float _lidar_detection_compute_time_type;
  _lidar_detection_compute_time_type lidar_detection_compute_time;

   typedef float _camera_detection_compute_time_type;
  _camera_detection_compute_time_type camera_detection_compute_time;

   typedef float _fusion_detection_compute_time_type;
  _fusion_detection_compute_time_type fusion_detection_compute_time;

   typedef float _time2_type;
  _time2_type time2;

   typedef float _time3_type;
  _time3_type time3;

   typedef float _time4_type;
  _time4_type time4;

   typedef float _time5_type;
  _time5_type time5;

   typedef float _time6_type;
  _time6_type time6;

   typedef float _time7_type;
  _time7_type time7;

   typedef float _time8_type;
  _time8_type time8;

   typedef float _time9_type;
  _time9_type time9;





  typedef boost::shared_ptr< ::fsd_common_msgs::Time_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::Time_<ContainerAllocator> const> ConstPtr;

}; // struct Time_

typedef ::fsd_common_msgs::Time_<std::allocator<void> > Time;

typedef boost::shared_ptr< ::fsd_common_msgs::Time > TimePtr;
typedef boost::shared_ptr< ::fsd_common_msgs::Time const> TimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::Time_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::Time_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::Time_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::Time_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_id_num == rhs.frame_id_num &&
    lhs.sum_compute_time == rhs.sum_compute_time &&
    lhs.control_compute_time == rhs.control_compute_time &&
    lhs.boundary_detector_compute_time == rhs.boundary_detector_compute_time &&
    lhs.line_detector_compute_time == rhs.line_detector_compute_time &&
    lhs.skidpad_detector_compute_time == rhs.skidpad_detector_compute_time &&
    lhs.lidar_detection_compute_time == rhs.lidar_detection_compute_time &&
    lhs.camera_detection_compute_time == rhs.camera_detection_compute_time &&
    lhs.fusion_detection_compute_time == rhs.fusion_detection_compute_time &&
    lhs.time2 == rhs.time2 &&
    lhs.time3 == rhs.time3 &&
    lhs.time4 == rhs.time4 &&
    lhs.time5 == rhs.time5 &&
    lhs.time6 == rhs.time6 &&
    lhs.time7 == rhs.time7 &&
    lhs.time8 == rhs.time8 &&
    lhs.time9 == rhs.time9;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::Time_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::Time_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::Time_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::Time_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::Time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::Time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::Time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::Time_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cb510b1efb584eb4466d8f45492e730";
  }

  static const char* value(const ::fsd_common_msgs::Time_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cb510b1efb584ebULL;
  static const uint64_t static_value2 = 0x4466d8f45492e730ULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/Time";
  }

  static const char* value(const ::fsd_common_msgs::Time_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::Time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# message of Asensing perception result.It is INS data. \n"
"Header header         # standard ROS message header\n"
"uint64 frame_id_num  \n"
"float32 sum_compute_time\n"
"float32 control_compute_time\n"
"float32 boundary_detector_compute_time\n"
"float32 line_detector_compute_time\n"
"float32 skidpad_detector_compute_time\n"
"float32 lidar_detection_compute_time\n"
"float32 camera_detection_compute_time\n"
"float32 fusion_detection_compute_time\n"
"float32 time2\n"
"float32 time3\n"
"float32 time4\n"
"float32 time5\n"
"float32 time6\n"
"float32 time7\n"
"float32 time8\n"
"float32 time9\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fsd_common_msgs::Time_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::Time_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_id_num);
      stream.next(m.sum_compute_time);
      stream.next(m.control_compute_time);
      stream.next(m.boundary_detector_compute_time);
      stream.next(m.line_detector_compute_time);
      stream.next(m.skidpad_detector_compute_time);
      stream.next(m.lidar_detection_compute_time);
      stream.next(m.camera_detection_compute_time);
      stream.next(m.fusion_detection_compute_time);
      stream.next(m.time2);
      stream.next(m.time3);
      stream.next(m.time4);
      stream.next(m.time5);
      stream.next(m.time6);
      stream.next(m.time7);
      stream.next(m.time8);
      stream.next(m.time9);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Time_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::Time_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::Time_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_id_num: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_id_num);
    s << indent << "sum_compute_time: ";
    Printer<float>::stream(s, indent + "  ", v.sum_compute_time);
    s << indent << "control_compute_time: ";
    Printer<float>::stream(s, indent + "  ", v.control_compute_time);
    s << indent << "boundary_detector_compute_time: ";
    Printer<float>::stream(s, indent + "  ", v.boundary_detector_compute_time);
    s << indent << "line_detector_compute_time: ";
    Printer<float>::stream(s, indent + "  ", v.line_detector_compute_time);
    s << indent << "skidpad_detector_compute_time: ";
    Printer<float>::stream(s, indent + "  ", v.skidpad_detector_compute_time);
    s << indent << "lidar_detection_compute_time: ";
    Printer<float>::stream(s, indent + "  ", v.lidar_detection_compute_time);
    s << indent << "camera_detection_compute_time: ";
    Printer<float>::stream(s, indent + "  ", v.camera_detection_compute_time);
    s << indent << "fusion_detection_compute_time: ";
    Printer<float>::stream(s, indent + "  ", v.fusion_detection_compute_time);
    s << indent << "time2: ";
    Printer<float>::stream(s, indent + "  ", v.time2);
    s << indent << "time3: ";
    Printer<float>::stream(s, indent + "  ", v.time3);
    s << indent << "time4: ";
    Printer<float>::stream(s, indent + "  ", v.time4);
    s << indent << "time5: ";
    Printer<float>::stream(s, indent + "  ", v.time5);
    s << indent << "time6: ";
    Printer<float>::stream(s, indent + "  ", v.time6);
    s << indent << "time7: ";
    Printer<float>::stream(s, indent + "  ", v.time7);
    s << indent << "time8: ";
    Printer<float>::stream(s, indent + "  ", v.time8);
    s << indent << "time9: ";
    Printer<float>::stream(s, indent + "  ", v.time9);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_TIME_H
