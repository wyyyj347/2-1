// Generated by gencpp from file fsd_common_msgs/Feedback.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_FEEDBACK_H
#define FSD_COMMON_MSGS_MESSAGE_FEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct Feedback_
{
  typedef Feedback_<ContainerAllocator> Type;

  Feedback_()
    : header()
    , frame_id_num(0)
    , wheel_speed_fl(0.0)
    , wheel_speed_fr(0.0)
    , wheel_speed_rl(0.0)
    , wheel_speed_rr(0.0)
    , motor_command_speed_rl(0.0)
    , motor_command_speed_rr(0.0)
    , motor_return_speed_rl(0.0)
    , motor_return_speed_rr(0.0)
    , motor_command_torq_rl(0.0)
    , motor_command_torq_rr(0.0)
    , motor_return_torq_rl(0.0)
    , motor_return_torq_rr(0.0)  {
    }
  Feedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_id_num(0)
    , wheel_speed_fl(0.0)
    , wheel_speed_fr(0.0)
    , wheel_speed_rl(0.0)
    , wheel_speed_rr(0.0)
    , motor_command_speed_rl(0.0)
    , motor_command_speed_rr(0.0)
    , motor_return_speed_rl(0.0)
    , motor_return_speed_rr(0.0)
    , motor_command_torq_rl(0.0)
    , motor_command_torq_rr(0.0)
    , motor_return_torq_rl(0.0)
    , motor_return_torq_rr(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _frame_id_num_type;
  _frame_id_num_type frame_id_num;

   typedef float _wheel_speed_fl_type;
  _wheel_speed_fl_type wheel_speed_fl;

   typedef float _wheel_speed_fr_type;
  _wheel_speed_fr_type wheel_speed_fr;

   typedef float _wheel_speed_rl_type;
  _wheel_speed_rl_type wheel_speed_rl;

   typedef float _wheel_speed_rr_type;
  _wheel_speed_rr_type wheel_speed_rr;

   typedef float _motor_command_speed_rl_type;
  _motor_command_speed_rl_type motor_command_speed_rl;

   typedef float _motor_command_speed_rr_type;
  _motor_command_speed_rr_type motor_command_speed_rr;

   typedef float _motor_return_speed_rl_type;
  _motor_return_speed_rl_type motor_return_speed_rl;

   typedef float _motor_return_speed_rr_type;
  _motor_return_speed_rr_type motor_return_speed_rr;

   typedef float _motor_command_torq_rl_type;
  _motor_command_torq_rl_type motor_command_torq_rl;

   typedef float _motor_command_torq_rr_type;
  _motor_command_torq_rr_type motor_command_torq_rr;

   typedef float _motor_return_torq_rl_type;
  _motor_return_torq_rl_type motor_return_torq_rl;

   typedef float _motor_return_torq_rr_type;
  _motor_return_torq_rr_type motor_return_torq_rr;





  typedef boost::shared_ptr< ::fsd_common_msgs::Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct Feedback_

typedef ::fsd_common_msgs::Feedback_<std::allocator<void> > Feedback;

typedef boost::shared_ptr< ::fsd_common_msgs::Feedback > FeedbackPtr;
typedef boost::shared_ptr< ::fsd_common_msgs::Feedback const> FeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::Feedback_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::Feedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_id_num == rhs.frame_id_num &&
    lhs.wheel_speed_fl == rhs.wheel_speed_fl &&
    lhs.wheel_speed_fr == rhs.wheel_speed_fr &&
    lhs.wheel_speed_rl == rhs.wheel_speed_rl &&
    lhs.wheel_speed_rr == rhs.wheel_speed_rr &&
    lhs.motor_command_speed_rl == rhs.motor_command_speed_rl &&
    lhs.motor_command_speed_rr == rhs.motor_command_speed_rr &&
    lhs.motor_return_speed_rl == rhs.motor_return_speed_rl &&
    lhs.motor_return_speed_rr == rhs.motor_return_speed_rr &&
    lhs.motor_command_torq_rl == rhs.motor_command_torq_rl &&
    lhs.motor_command_torq_rr == rhs.motor_command_torq_rr &&
    lhs.motor_return_torq_rl == rhs.motor_return_torq_rl &&
    lhs.motor_return_torq_rr == rhs.motor_return_torq_rr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::Feedback_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::Feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::Feedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::Feedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7937c93e48c88e31894a7a84ffb18db";
  }

  static const char* value(const ::fsd_common_msgs::Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7937c93e48c88e3ULL;
  static const uint64_t static_value2 = 0x1894a7a84ffb18dbULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/Feedback";
  }

  static const char* value(const ::fsd_common_msgs::Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# car feedback data. \n"
"Header header         # standard ROS message header\n"
"uint64 frame_id_num  \n"
"float32 wheel_speed_fl\n"
"float32 wheel_speed_fr\n"
"float32 wheel_speed_rl\n"
"float32 wheel_speed_rr\n"
"float32 motor_command_speed_rl\n"
"float32 motor_command_speed_rr\n"
"float32 motor_return_speed_rl\n"
"float32 motor_return_speed_rr\n"
"float32 motor_command_torq_rl\n"
"float32 motor_command_torq_rr\n"
"float32 motor_return_torq_rl\n"
"float32 motor_return_torq_rr\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fsd_common_msgs::Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_id_num);
      stream.next(m.wheel_speed_fl);
      stream.next(m.wheel_speed_fr);
      stream.next(m.wheel_speed_rl);
      stream.next(m.wheel_speed_rr);
      stream.next(m.motor_command_speed_rl);
      stream.next(m.motor_command_speed_rr);
      stream.next(m.motor_return_speed_rl);
      stream.next(m.motor_return_speed_rr);
      stream.next(m.motor_command_torq_rl);
      stream.next(m.motor_command_torq_rr);
      stream.next(m.motor_return_torq_rl);
      stream.next(m.motor_return_torq_rr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::Feedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_id_num: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frame_id_num);
    s << indent << "wheel_speed_fl: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_fl);
    s << indent << "wheel_speed_fr: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_fr);
    s << indent << "wheel_speed_rl: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_rl);
    s << indent << "wheel_speed_rr: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_speed_rr);
    s << indent << "motor_command_speed_rl: ";
    Printer<float>::stream(s, indent + "  ", v.motor_command_speed_rl);
    s << indent << "motor_command_speed_rr: ";
    Printer<float>::stream(s, indent + "  ", v.motor_command_speed_rr);
    s << indent << "motor_return_speed_rl: ";
    Printer<float>::stream(s, indent + "  ", v.motor_return_speed_rl);
    s << indent << "motor_return_speed_rr: ";
    Printer<float>::stream(s, indent + "  ", v.motor_return_speed_rr);
    s << indent << "motor_command_torq_rl: ";
    Printer<float>::stream(s, indent + "  ", v.motor_command_torq_rl);
    s << indent << "motor_command_torq_rr: ";
    Printer<float>::stream(s, indent + "  ", v.motor_command_torq_rr);
    s << indent << "motor_return_torq_rl: ";
    Printer<float>::stream(s, indent + "  ", v.motor_return_torq_rl);
    s << indent << "motor_return_torq_rr: ";
    Printer<float>::stream(s, indent + "  ", v.motor_return_torq_rr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_FEEDBACK_H
