// Generated by gencpp from file fsd_common_msgs/DrivingDynamics.msg
// DO NOT EDIT!


#ifndef FSD_COMMON_MSGS_MESSAGE_DRIVINGDYNAMICS_H
#define FSD_COMMON_MSGS_MESSAGE_DRIVINGDYNAMICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace fsd_common_msgs
{
template <class ContainerAllocator>
struct DrivingDynamics_
{
  typedef DrivingDynamics_<ContainerAllocator> Type;

  DrivingDynamics_()
    : header()
    , speed_target(0.0)
    , speed_actual(0.0)
    , steering_angle_target(0.0)
    , steering_angle_actual(0.0)
    , brake_hydr_target(0.0)
    , brake_hydr_actual(0.0)
    , motor_moment_target(0.0)
    , motor_moment_actual(0.0)
    , acceleration_longitudinal(0.0)
    , acceleration_lateral(0.0)
    , yaw_rate(0.0)  {
    }
  DrivingDynamics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , speed_target(0.0)
    , speed_actual(0.0)
    , steering_angle_target(0.0)
    , steering_angle_actual(0.0)
    , brake_hydr_target(0.0)
    , brake_hydr_actual(0.0)
    , motor_moment_target(0.0)
    , motor_moment_actual(0.0)
    , acceleration_longitudinal(0.0)
    , acceleration_lateral(0.0)
    , yaw_rate(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _speed_target_type;
  _speed_target_type speed_target;

   typedef float _speed_actual_type;
  _speed_actual_type speed_actual;

   typedef float _steering_angle_target_type;
  _steering_angle_target_type steering_angle_target;

   typedef float _steering_angle_actual_type;
  _steering_angle_actual_type steering_angle_actual;

   typedef float _brake_hydr_target_type;
  _brake_hydr_target_type brake_hydr_target;

   typedef float _brake_hydr_actual_type;
  _brake_hydr_actual_type brake_hydr_actual;

   typedef float _motor_moment_target_type;
  _motor_moment_target_type motor_moment_target;

   typedef float _motor_moment_actual_type;
  _motor_moment_actual_type motor_moment_actual;

   typedef float _acceleration_longitudinal_type;
  _acceleration_longitudinal_type acceleration_longitudinal;

   typedef float _acceleration_lateral_type;
  _acceleration_lateral_type acceleration_lateral;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;





  typedef boost::shared_ptr< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> const> ConstPtr;

}; // struct DrivingDynamics_

typedef ::fsd_common_msgs::DrivingDynamics_<std::allocator<void> > DrivingDynamics;

typedef boost::shared_ptr< ::fsd_common_msgs::DrivingDynamics > DrivingDynamicsPtr;
typedef boost::shared_ptr< ::fsd_common_msgs::DrivingDynamics const> DrivingDynamicsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.speed_target == rhs.speed_target &&
    lhs.speed_actual == rhs.speed_actual &&
    lhs.steering_angle_target == rhs.steering_angle_target &&
    lhs.steering_angle_actual == rhs.steering_angle_actual &&
    lhs.brake_hydr_target == rhs.brake_hydr_target &&
    lhs.brake_hydr_actual == rhs.brake_hydr_actual &&
    lhs.motor_moment_target == rhs.motor_moment_target &&
    lhs.motor_moment_actual == rhs.motor_moment_actual &&
    lhs.acceleration_longitudinal == rhs.acceleration_longitudinal &&
    lhs.acceleration_lateral == rhs.acceleration_lateral &&
    lhs.yaw_rate == rhs.yaw_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator1> & lhs, const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fsd_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e81485915cba41c826595d00662f5ac3";
  }

  static const char* value(const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe81485915cba41c8ULL;
  static const uint64_t static_value2 = 0x26595d00662f5ac3ULL;
};

template<class ContainerAllocator>
struct DataType< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fsd_common_msgs/DrivingDynamics";
  }

  static const char* value(const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"#此msg用来发送特定数据给CAN_send节点，再发到canB总线\n"
"float32 speed_target\n"
"float32 speed_actual\n"
"float32 steering_angle_target\n"
"float32 steering_angle_actual\n"
"float32 brake_hydr_target\n"
"float32 brake_hydr_actual\n"
"float32 motor_moment_target\n"
"float32 motor_moment_actual\n"
"\n"
"float32 acceleration_longitudinal\n"
"float32 acceleration_lateral\n"
"float32 yaw_rate\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.speed_target);
      stream.next(m.speed_actual);
      stream.next(m.steering_angle_target);
      stream.next(m.steering_angle_actual);
      stream.next(m.brake_hydr_target);
      stream.next(m.brake_hydr_actual);
      stream.next(m.motor_moment_target);
      stream.next(m.motor_moment_actual);
      stream.next(m.acceleration_longitudinal);
      stream.next(m.acceleration_lateral);
      stream.next(m.yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DrivingDynamics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fsd_common_msgs::DrivingDynamics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "speed_target: ";
    Printer<float>::stream(s, indent + "  ", v.speed_target);
    s << indent << "speed_actual: ";
    Printer<float>::stream(s, indent + "  ", v.speed_actual);
    s << indent << "steering_angle_target: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle_target);
    s << indent << "steering_angle_actual: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle_actual);
    s << indent << "brake_hydr_target: ";
    Printer<float>::stream(s, indent + "  ", v.brake_hydr_target);
    s << indent << "brake_hydr_actual: ";
    Printer<float>::stream(s, indent + "  ", v.brake_hydr_actual);
    s << indent << "motor_moment_target: ";
    Printer<float>::stream(s, indent + "  ", v.motor_moment_target);
    s << indent << "motor_moment_actual: ";
    Printer<float>::stream(s, indent + "  ", v.motor_moment_actual);
    s << indent << "acceleration_longitudinal: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_longitudinal);
    s << indent << "acceleration_lateral: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_lateral);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSD_COMMON_MSGS_MESSAGE_DRIVINGDYNAMICS_H
